!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BITS_TO_BYTES	tee_crypto_api.c	65;"	d	file:
CMAC_ctx	tee_crypto_api.c	75;"	d	file:
DBG_LOCATION	tee_logging.h	23;"	d
DH_key	tee_crypto_api.c	69;"	d	file:
DIGEST_CTX	tee_crypto_api.c	66;"	d	file:
DSA_key	tee_crypto_api.c	68;"	d	file:
EC_key	tee_crypto_api.c	70;"	d	file:
HMAC_ctx	tee_crypto_api.c	74;"	d	file:
IV	tee_crypto_api.c	/^	void *IV;$/;"	m	struct:operation_key	file:
IV_len	tee_crypto_api.c	/^	uint32_t IV_len;$/;"	m	struct:operation_key	file:
OT_LOG	tee_logging.h	28;"	d
OT_LOG	tee_logging.h	53;"	d
OT_LOG1	tee_logging.h	34;"	d
OT_LOG1	tee_logging.h	54;"	d
OT_LOG_ERR	tee_logging.h	39;"	d
OT_LOG_ERR	tee_logging.h	55;"	d
OT_LOG_INT	tee_logging.h	44;"	d
OT_LOG_INT	tee_logging.h	56;"	d
OT_LOG_STR	tee_logging.h	49;"	d
OT_LOG_STR	tee_logging.h	57;"	d
RSA_key	tee_crypto_api.c	67;"	d	file:
SYM_ctx	tee_crypto_api.c	71;"	d	file:
SYM_key	tee_crypto_api.c	72;"	d	file:
SYM_key_len	tee_crypto_api.c	73;"	d	file:
TEE_ACCESS_ANY_OWNER	tee_data_types.h	73;"	d
TEE_ACCESS_READ	tee_data_types.h	71;"	d
TEE_ACCESS_WRITE	tee_data_types.h	72;"	d
TEE_AEDecryptFinal	tee_crypto_api.c	/^TEE_Result TEE_AEDecryptFinal(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f
TEE_AEEncryptFinal	tee_crypto_api.c	/^TEE_Result TEE_AEEncryptFinal(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f
TEE_AEInit	tee_crypto_api.c	/^TEE_Result TEE_AEInit(TEE_OperationHandle operation, void *nonce, uint32_t nonceLen,$/;"	f
TEE_AEUpdate	tee_crypto_api.c	/^TEE_Result TEE_AEUpdate(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f
TEE_AEUpdateAAD	tee_crypto_api.c	/^void TEE_AEUpdateAAD(TEE_OperationHandle operation, void *AADdata, uint32_t AADdataLen)$/;"	f
TEE_ALG_AES_CBC_MAC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_AES_CBC_MAC_NOPAD = 0x30000110,$/;"	e	enum:__anon5
TEE_ALG_AES_CBC_MAC_PKCS5	tee_crypto_api.h	/^	TEE_ALG_AES_CBC_MAC_PKCS5 = 0x30000510,$/;"	e	enum:__anon5
TEE_ALG_AES_CBC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_AES_CBC_NOPAD = 0x10000110,$/;"	e	enum:__anon5
TEE_ALG_AES_CCM	tee_crypto_api.h	/^	TEE_ALG_AES_CCM = 0x40000710,$/;"	e	enum:__anon5
TEE_ALG_AES_CMAC	tee_crypto_api.h	/^	TEE_ALG_AES_CMAC = 0x30000610,$/;"	e	enum:__anon5
TEE_ALG_AES_CTR	tee_crypto_api.h	/^	TEE_ALG_AES_CTR = 0x10000210,$/;"	e	enum:__anon5
TEE_ALG_AES_CTS	tee_crypto_api.h	/^	TEE_ALG_AES_CTS = 0x10000310,$/;"	e	enum:__anon5
TEE_ALG_AES_ECB_NOPAD	tee_crypto_api.h	/^	TEE_ALG_AES_ECB_NOPAD = 0x10000010,$/;"	e	enum:__anon5
TEE_ALG_AES_GCM	tee_crypto_api.h	/^	TEE_ALG_AES_GCM = 0x40000810,$/;"	e	enum:__anon5
TEE_ALG_AES_XTS	tee_crypto_api.h	/^	TEE_ALG_AES_XTS = 0x10000410,$/;"	e	enum:__anon5
TEE_ALG_DES3_CBC_MAC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES3_CBC_MAC_NOPAD = 0x30000113,$/;"	e	enum:__anon5
TEE_ALG_DES3_CBC_MAC_PKCS5	tee_crypto_api.h	/^	TEE_ALG_DES3_CBC_MAC_PKCS5 = 0x30000513,$/;"	e	enum:__anon5
TEE_ALG_DES3_CBC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES3_CBC_NOPAD = 0x10000113,$/;"	e	enum:__anon5
TEE_ALG_DES3_ECB_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES3_ECB_NOPAD = 0x10000013,$/;"	e	enum:__anon5
TEE_ALG_DES_CBC_MAC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES_CBC_MAC_NOPAD = 0x30000111,$/;"	e	enum:__anon5
TEE_ALG_DES_CBC_MAC_PKCS5	tee_crypto_api.h	/^	TEE_ALG_DES_CBC_MAC_PKCS5 = 0x30000511,$/;"	e	enum:__anon5
TEE_ALG_DES_CBC_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES_CBC_NOPAD = 0x10000111,$/;"	e	enum:__anon5
TEE_ALG_DES_ECB_NOPAD	tee_crypto_api.h	/^	TEE_ALG_DES_ECB_NOPAD = 0x10000011,$/;"	e	enum:__anon5
TEE_ALG_DH_DERIVE_SHARED_SECRET	tee_crypto_api.h	/^	TEE_ALG_DH_DERIVE_SHARED_SECRET = 0x80000032,$/;"	e	enum:__anon5
TEE_ALG_DSA_SHA1	tee_crypto_api.h	/^	TEE_ALG_DSA_SHA1 = 0x70002131,$/;"	e	enum:__anon5
TEE_ALG_ECDSA_P192	tee_crypto_api.h	/^	TEE_ALG_ECDSA_P192 = 0x70001042,$/;"	e	enum:__anon5
TEE_ALG_ECDSA_P224	tee_crypto_api.h	/^	TEE_ALG_ECDSA_P224 = 0x70002042,$/;"	e	enum:__anon5
TEE_ALG_ECDSA_P256	tee_crypto_api.h	/^	TEE_ALG_ECDSA_P256 = 0x70003042,$/;"	e	enum:__anon5
TEE_ALG_ECDSA_P384	tee_crypto_api.h	/^	TEE_ALG_ECDSA_P384 = 0x70004042,$/;"	e	enum:__anon5
TEE_ALG_ECDSA_P521	tee_crypto_api.h	/^	TEE_ALG_ECDSA_P521 = 0x70005042$/;"	e	enum:__anon5
TEE_ALG_HMAC_MD5	tee_crypto_api.h	/^	TEE_ALG_HMAC_MD5 = 0x30000001,$/;"	e	enum:__anon5
TEE_ALG_HMAC_SHA1	tee_crypto_api.h	/^	TEE_ALG_HMAC_SHA1 = 0x30000002,$/;"	e	enum:__anon5
TEE_ALG_HMAC_SHA224	tee_crypto_api.h	/^	TEE_ALG_HMAC_SHA224 = 0x30000003,$/;"	e	enum:__anon5
TEE_ALG_HMAC_SHA256	tee_crypto_api.h	/^	TEE_ALG_HMAC_SHA256 = 0x30000004,$/;"	e	enum:__anon5
TEE_ALG_HMAC_SHA384	tee_crypto_api.h	/^	TEE_ALG_HMAC_SHA384 = 0x30000005,$/;"	e	enum:__anon5
TEE_ALG_HMAC_SHA512	tee_crypto_api.h	/^	TEE_ALG_HMAC_SHA512 = 0x30000006,$/;"	e	enum:__anon5
TEE_ALG_MD5	tee_crypto_api.h	/^	TEE_ALG_MD5 = 0x50000001,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 = 0x60210230,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 = 0x60310230,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 = 0x60410230,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384 = 0x60510230,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512 = 0x60610230,$/;"	e	enum:__anon5
TEE_ALG_RSAES_PKCS1_V1_5	tee_crypto_api.h	/^	TEE_ALG_RSAES_PKCS1_V1_5 = 0x60000130,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1 = 0x70212930,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224 = 0x70313930,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256 = 0x70414930,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384 = 0x70515930,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512 = 0x70616930,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_MD5	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_MD5 = 0x70001830,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_SHA1	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_SHA1 = 0x70002830,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_SHA224	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_SHA224 = 0x70003830,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_SHA256	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_SHA256 = 0x70004830,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_SHA384	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_SHA384 = 0x70005830,$/;"	e	enum:__anon5
TEE_ALG_RSASSA_PKCS1_V1_5_SHA512	tee_crypto_api.h	/^	TEE_ALG_RSASSA_PKCS1_V1_5_SHA512 = 0x70006830,$/;"	e	enum:__anon5
TEE_ALG_RSA_NOPAD	tee_crypto_api.h	/^	TEE_ALG_RSA_NOPAD = 0x60000030,$/;"	e	enum:__anon5
TEE_ALG_SHA1	tee_crypto_api.h	/^	TEE_ALG_SHA1 = 0x50000002,$/;"	e	enum:__anon5
TEE_ALG_SHA224	tee_crypto_api.h	/^	TEE_ALG_SHA224 = 0x50000003,$/;"	e	enum:__anon5
TEE_ALG_SHA256	tee_crypto_api.h	/^	TEE_ALG_SHA256 = 0x50000004,$/;"	e	enum:__anon5
TEE_ALG_SHA384	tee_crypto_api.h	/^	TEE_ALG_SHA384 = 0x50000005,$/;"	e	enum:__anon5
TEE_ALG_SHA512	tee_crypto_api.h	/^	TEE_ALG_SHA512 = 0x50000006,$/;"	e	enum:__anon5
TEE_ATTR_DH_BASE	tee_data_types.h	/^	TEE_ATTR_DH_BASE = 0xD0001232,$/;"	e	enum:__anon11
TEE_ATTR_DH_PRIME	tee_data_types.h	/^	TEE_ATTR_DH_PRIME = 0xD0001032,$/;"	e	enum:__anon11
TEE_ATTR_DH_PRIVATE_VALUE	tee_data_types.h	/^	TEE_ATTR_DH_PRIVATE_VALUE = 0xC0000232,$/;"	e	enum:__anon11
TEE_ATTR_DH_PUBLIC_VALUE	tee_data_types.h	/^	TEE_ATTR_DH_PUBLIC_VALUE = 0xD0000132,$/;"	e	enum:__anon11
TEE_ATTR_DH_SUBPRIME	tee_data_types.h	/^	TEE_ATTR_DH_SUBPRIME = 0xD0001132,$/;"	e	enum:__anon11
TEE_ATTR_DH_X_BITS	tee_data_types.h	/^	TEE_ATTR_DH_X_BITS = 0xF0001332,$/;"	e	enum:__anon11
TEE_ATTR_DSA_BASE	tee_data_types.h	/^	TEE_ATTR_DSA_BASE = 0xD0001231,$/;"	e	enum:__anon11
TEE_ATTR_DSA_PRIME	tee_data_types.h	/^	TEE_ATTR_DSA_PRIME = 0xD0001031,$/;"	e	enum:__anon11
TEE_ATTR_DSA_PRIVATE_VALUE	tee_data_types.h	/^	TEE_ATTR_DSA_PRIVATE_VALUE = 0xC0000231,$/;"	e	enum:__anon11
TEE_ATTR_DSA_PUBLIC_VALUE	tee_data_types.h	/^	TEE_ATTR_DSA_PUBLIC_VALUE = 0xD0000131,$/;"	e	enum:__anon11
TEE_ATTR_DSA_SUBPRIME	tee_data_types.h	/^	TEE_ATTR_DSA_SUBPRIME = 0xD0001131,$/;"	e	enum:__anon11
TEE_ATTR_ECC_CURVE	tee_data_types.h	/^	TEE_ATTR_ECC_CURVE = 0xF0000441$/;"	e	enum:__anon11
TEE_ATTR_ECC_PRIVATE_VALUE	tee_data_types.h	/^	TEE_ATTR_ECC_PRIVATE_VALUE = 0xC0000341,$/;"	e	enum:__anon11
TEE_ATTR_ECC_PUBLIC_VALUE_X	tee_data_types.h	/^	TEE_ATTR_ECC_PUBLIC_VALUE_X = 0xD0000141,$/;"	e	enum:__anon11
TEE_ATTR_ECC_PUBLIC_VALUE_Y	tee_data_types.h	/^	TEE_ATTR_ECC_PUBLIC_VALUE_Y = 0xD0000241,$/;"	e	enum:__anon11
TEE_ATTR_FLAG_PUBLIC	tee_data_types.h	/^	TEE_ATTR_FLAG_PUBLIC = 0x10000000$/;"	e	enum:__anon12
TEE_ATTR_FLAG_VALUE	tee_data_types.h	/^	TEE_ATTR_FLAG_VALUE = 0x20000000,$/;"	e	enum:__anon12
TEE_ATTR_RSA_COEFFICIENT	tee_data_types.h	/^	TEE_ATTR_RSA_COEFFICIENT = 0xC0000830,$/;"	e	enum:__anon11
TEE_ATTR_RSA_EXPONENT1	tee_data_types.h	/^	TEE_ATTR_RSA_EXPONENT1 = 0xC0000630,$/;"	e	enum:__anon11
TEE_ATTR_RSA_EXPONENT2	tee_data_types.h	/^	TEE_ATTR_RSA_EXPONENT2 = 0xC0000730,$/;"	e	enum:__anon11
TEE_ATTR_RSA_MODULUS	tee_data_types.h	/^	TEE_ATTR_RSA_MODULUS = 0xD0000130,$/;"	e	enum:__anon11
TEE_ATTR_RSA_OAEP_LABEL	tee_data_types.h	/^	TEE_ATTR_RSA_OAEP_LABEL = 0xD0000930,$/;"	e	enum:__anon11
TEE_ATTR_RSA_PRIME1	tee_data_types.h	/^	TEE_ATTR_RSA_PRIME1 = 0xC0000430,$/;"	e	enum:__anon11
TEE_ATTR_RSA_PRIME2	tee_data_types.h	/^	TEE_ATTR_RSA_PRIME2 = 0xC0000530,$/;"	e	enum:__anon11
TEE_ATTR_RSA_PRIVATE_EXPONENT	tee_data_types.h	/^	TEE_ATTR_RSA_PRIVATE_EXPONENT = 0xC0000330,$/;"	e	enum:__anon11
TEE_ATTR_RSA_PSS_SALT_LENGTH	tee_data_types.h	/^	TEE_ATTR_RSA_PSS_SALT_LENGTH = 0xF0000A30,$/;"	e	enum:__anon11
TEE_ATTR_RSA_PUBLIC_EXPONENT	tee_data_types.h	/^	TEE_ATTR_RSA_PUBLIC_EXPONENT = 0xD0000230,$/;"	e	enum:__anon11
TEE_ATTR_SECRET_VALUE	tee_data_types.h	/^	TEE_ATTR_SECRET_VALUE = 0xC0000000,$/;"	e	enum:__anon11
TEE_AllocateOperation	tee_crypto_api.c	/^TEE_Result TEE_AllocateOperation(TEE_OperationHandle *operation, uint32_t algorithm, uint32_t mode,$/;"	f
TEE_AllocatePersistentObjectEnumerator	tee_storage_api.c	/^TEE_Result TEE_AllocatePersistentObjectEnumerator(TEE_ObjectEnumHandle *objectEnumerator)$/;"	f
TEE_AllocateTransientObject	tee_storage_api.c	/^TEE_Result TEE_AllocateTransientObject(uint32_t objectType, uint32_t maxObjectSize,$/;"	f
TEE_AsymmetricDecrypt	tee_crypto_api.c	/^TEE_Result TEE_AsymmetricDecrypt(TEE_OperationHandle operation, TEE_Attribute *params,$/;"	f
TEE_AsymmetricEncrypt	tee_crypto_api.c	/^TEE_Result TEE_AsymmetricEncrypt(TEE_OperationHandle operation, TEE_Attribute *params,$/;"	f
TEE_AsymmetricSignDigest	tee_crypto_api.c	/^TEE_Result TEE_AsymmetricSignDigest(TEE_OperationHandle operation, TEE_Attribute *params,$/;"	f
TEE_AsymmetricVerifyDigest	tee_crypto_api.c	/^TEE_Result TEE_AsymmetricVerifyDigest(TEE_OperationHandle operation, TEE_Attribute *params,$/;"	f
TEE_Attribute	tee_storage_api.h	/^} TEE_Attribute;$/;"	t	typeref:struct:__anon14
TEE_CheckMemoryAccessRights	tee_memory.c	/^TEE_Result TEE_CheckMemoryAccessRights(uint32_t accessFlags, void *buf, size_t size)$/;"	f
TEE_CipherDoFinal	tee_crypto_api.c	/^TEE_Result TEE_CipherDoFinal(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f
TEE_CipherInit	tee_crypto_api.c	/^void TEE_CipherInit(TEE_OperationHandle operation, void *IV, uint32_t IVLen)$/;"	f
TEE_CipherUpdate	tee_crypto_api.c	/^TEE_Result TEE_CipherUpdate(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f
TEE_CloseAndDeletePersistentObject	tee_storage_api.c	/^void TEE_CloseAndDeletePersistentObject(TEE_ObjectHandle object)$/;"	f
TEE_CloseObject	tee_storage_api.c	/^void TEE_CloseObject(TEE_ObjectHandle object)$/;"	f
TEE_CopyObjectAttributes	tee_storage_api.c	/^void TEE_CopyObjectAttributes(TEE_ObjectHandle destObject, TEE_ObjectHandle srcObject)$/;"	f
TEE_CopyOperation	tee_crypto_api.c	/^void TEE_CopyOperation(TEE_OperationHandle dstOperation, TEE_OperationHandle srcOperation)$/;"	f
TEE_CreatePersistentObject	tee_storage_api.c	/^TEE_Result TEE_CreatePersistentObject(uint32_t storageID, void *objectID, size_t objectIDLen,$/;"	f
TEE_DATA_FLAG_ACCESS_READ	tee_storage_api.h	69;"	d
TEE_DATA_FLAG_ACCESS_WRITE	tee_storage_api.h	70;"	d
TEE_DATA_FLAG_ACCESS_WRITE_META	tee_storage_api.h	71;"	d
TEE_DATA_FLAG_CREATE	tee_storage_api.h	74;"	d
TEE_DATA_FLAG_EXCLUSIVE	tee_storage_api.h	77;"	d
TEE_DATA_FLAG_OVERWRITE	tee_storage_api.h	75;"	d
TEE_DATA_FLAG_SHARE_READ	tee_storage_api.h	72;"	d
TEE_DATA_FLAG_SHARE_WRITE	tee_storage_api.h	73;"	d
TEE_DATA_MAX_POSITION	tee_storage_api.h	104;"	d
TEE_DATA_SEEK_CUR	tee_storage_api.h	/^	TEE_DATA_SEEK_CUR,$/;"	e	enum:__anon19
TEE_DATA_SEEK_END	tee_storage_api.h	/^	TEE_DATA_SEEK_END$/;"	e	enum:__anon19
TEE_DATA_SEEK_SET	tee_storage_api.h	/^	TEE_DATA_SEEK_SET = 0,$/;"	e	enum:__anon19
TEE_DeriveKey	tee_crypto_api.c	/^void TEE_DeriveKey(TEE_OperationHandle operation, TEE_Attribute *params, uint32_t paramCount,$/;"	f
TEE_DigestDoFinal	tee_crypto_api.c	/^TEE_Result TEE_DigestDoFinal(TEE_OperationHandle operation, void *chunk, uint32_t chunkLen,$/;"	f
TEE_DigestUpdate	tee_crypto_api.c	/^void TEE_DigestUpdate(TEE_OperationHandle operation, void *chunk, uint32_t chunkSize)$/;"	f
TEE_ECC_CURVE_NIST_P192	tee_data_types.h	/^	TEE_ECC_CURVE_NIST_P192 = 0x00000001,$/;"	e	enum:__anon13
TEE_ECC_CURVE_NIST_P224	tee_data_types.h	/^	TEE_ECC_CURVE_NIST_P224 = 0x00000002,$/;"	e	enum:__anon13
TEE_ECC_CURVE_NIST_P256	tee_data_types.h	/^	TEE_ECC_CURVE_NIST_P256 = 0x00000003,$/;"	e	enum:__anon13
TEE_ECC_CURVE_NIST_P384	tee_data_types.h	/^	TEE_ECC_CURVE_NIST_P384 = 0x00000004,$/;"	e	enum:__anon13
TEE_ECC_CURVE_NIST_P521	tee_data_types.h	/^	TEE_ECC_CURVE_NIST_P521 = 0x00000005$/;"	e	enum:__anon13
TEE_Free	tee_memory.c	/^void TEE_Free(void *buffer)$/;"	f
TEE_FreeOperation	tee_crypto_api.c	/^void TEE_FreeOperation(TEE_OperationHandle operation)$/;"	f
TEE_FreePersistentObjectEnumerator	tee_storage_api.c	/^void TEE_FreePersistentObjectEnumerator(TEE_ObjectEnumHandle objectEnumerator)$/;"	f
TEE_FreeTransientObject	tee_storage_api.c	/^void TEE_FreeTransientObject(TEE_ObjectHandle object)$/;"	f
TEE_GenerateKey	tee_storage_api.c	/^TEE_Result TEE_GenerateKey(TEE_ObjectHandle object, uint32_t keySize, TEE_Attribute *params,$/;"	f
TEE_GenerateRandom	tee_crypto_api.c	/^void TEE_GenerateRandom(void *randomBuffer, uint32_t randomBufferLen)$/;"	f
TEE_GetInstanceData	tee_memory.c	/^void *TEE_GetInstanceData()$/;"	f
TEE_GetNextPersistentObject	tee_storage_api.c	/^TEE_Result TEE_GetNextPersistentObject(TEE_ObjectEnumHandle objectEnumerator,$/;"	f
TEE_GetObjectBufferAttribute	tee_storage_api.c	/^TEE_Result TEE_GetObjectBufferAttribute(TEE_ObjectHandle object, uint32_t attributeID, void *buffer,$/;"	f
TEE_GetObjectInfo	tee_storage_api.c	/^void TEE_GetObjectInfo(TEE_ObjectHandle object, TEE_ObjectInfo *objectInfo)$/;"	f
TEE_GetObjectValueAttribute	tee_storage_api.c	/^TEE_Result TEE_GetObjectValueAttribute(TEE_ObjectHandle object, uint32_t attributeID, uint32_t *a,$/;"	f
TEE_GetOperationInfo	tee_crypto_api.c	/^void TEE_GetOperationInfo(TEE_OperationHandle operation, TEE_OperationInfo *operationInfo)$/;"	f
TEE_GetOperationInfoMultiple	tee_crypto_api.c	/^TEE_Result TEE_GetOperationInfoMultiple(TEE_OperationHandle operation,$/;"	f
TEE_HANDLE_FLAG_EXPECT_TWO_KEYS	tee_storage_api.h	92;"	d
TEE_HANDLE_FLAG_INITIALIZED	tee_storage_api.h	90;"	d
TEE_HANDLE_FLAG_KEY_SET	tee_storage_api.h	91;"	d
TEE_HANDLE_FLAG_PERSISTENT	tee_storage_api.h	89;"	d
TEE_Identity	tee_data_types.h	/^} TEE_Identity;$/;"	t	typeref:struct:__anon6
TEE_InitRefAttribute	tee_storage_api.c	/^void TEE_InitRefAttribute(TEE_Attribute *attr, uint32_t attributeID, void *buffer, size_t length)$/;"	f
TEE_InitValueAttribute	tee_storage_api.c	/^void TEE_InitValueAttribute(TEE_Attribute *attr, uint32_t attributeID, uint32_t a, uint32_t b)$/;"	f
TEE_LOGIN_APPLICATION	tee_data_types.h	61;"	d
TEE_LOGIN_APPLICATION_GROUP	tee_data_types.h	63;"	d
TEE_LOGIN_APPLICATION_USER	tee_data_types.h	62;"	d
TEE_LOGIN_GROUP	tee_data_types.h	60;"	d
TEE_LOGIN_PUBLIC	tee_data_types.h	58;"	d
TEE_LOGIN_TRUSTED_APP	tee_data_types.h	64;"	d
TEE_LOGIN_USER	tee_data_types.h	59;"	d
TEE_MACCompareFinal	tee_crypto_api.c	/^TEE_Result TEE_MACCompareFinal(TEE_OperationHandle operation, void *message, uint32_t messageLen,$/;"	f
TEE_MACComputeFinal	tee_crypto_api.c	/^TEE_Result TEE_MACComputeFinal(TEE_OperationHandle operation, void *message, uint32_t messageLen,$/;"	f
TEE_MACInit	tee_crypto_api.c	/^void TEE_MACInit(TEE_OperationHandle operation, void *IV, uint32_t IVLen)$/;"	f
TEE_MACUpdate	tee_crypto_api.c	/^void TEE_MACUpdate(TEE_OperationHandle operation, void *chunk, uint32_t chunkSize)$/;"	f
TEE_MEMORY_ACCESS_ANY_OWNER	tee_data_types.h	78;"	d
TEE_MEMORY_ACCESS_READ	tee_data_types.h	76;"	d
TEE_MEMORY_ACCESS_WRITE	tee_data_types.h	77;"	d
TEE_MODE_DECRYPT	tee_crypto_api.h	/^	TEE_MODE_DECRYPT = 1,$/;"	e	enum:__anon1
TEE_MODE_DERIVE	tee_crypto_api.h	/^	TEE_MODE_DERIVE = 6$/;"	e	enum:__anon1
TEE_MODE_DIGEST	tee_crypto_api.h	/^	TEE_MODE_DIGEST = 5,$/;"	e	enum:__anon1
TEE_MODE_ENCRYPT	tee_crypto_api.h	/^	TEE_MODE_ENCRYPT = 0,$/;"	e	enum:__anon1
TEE_MODE_MAC	tee_crypto_api.h	/^	TEE_MODE_MAC = 4,$/;"	e	enum:__anon1
TEE_MODE_SIGN	tee_crypto_api.h	/^	TEE_MODE_SIGN = 2,$/;"	e	enum:__anon1
TEE_MODE_VERIFY	tee_crypto_api.h	/^	TEE_MODE_VERIFY = 3,$/;"	e	enum:__anon1
TEE_Malloc	tee_memory.c	/^void *TEE_Malloc(size_t size, uint32_t hint)$/;"	f
TEE_MemCompare	tee_memory.c	/^int32_t TEE_MemCompare(void *buffer1, void *buffer2, uint32_t size)$/;"	f
TEE_MemFill	tee_memory.c	/^void TEE_MemFill(void *buffer, uint32_t x, uint32_t size)$/;"	f
TEE_MemMove	tee_memory.c	/^void TEE_MemMove(void *dest, void *src, uint32_t size)$/;"	f
TEE_OBJECT_ID_MAX_LEN	tee_storage_api.h	105;"	d
TEE_OPERATION_AE	tee_storage_api.h	97;"	d
TEE_OPERATION_ASYMMETRIC_CIPHER	tee_storage_api.h	99;"	d
TEE_OPERATION_ASYMMETRIC_SIGNATURE	tee_storage_api.h	100;"	d
TEE_OPERATION_CIPHER	tee_storage_api.h	95;"	d
TEE_OPERATION_DIGEST	tee_storage_api.h	98;"	d
TEE_OPERATION_KEY_DERIVATION	tee_storage_api.h	101;"	d
TEE_OPERATION_MAC	tee_storage_api.h	96;"	d
TEE_OP_STATE_ACTIVE	tee_crypto_api.c	/^static const uint32_t TEE_OP_STATE_ACTIVE = 1;$/;"	v	file:
TEE_OP_STATE_INITIAL	tee_crypto_api.c	/^static const uint32_t TEE_OP_STATE_INITIAL = 0;$/;"	v	file:
TEE_ObjectEnumHandle	tee_storage_api.h	/^typedef struct __TEE_ObjectEnumHandle* TEE_ObjectEnumHandle;$/;"	t	typeref:struct:__TEE_ObjectEnumHandle
TEE_ObjectHandle	tee_storage_api.h	/^typedef struct __TEE_ObjectHandle* TEE_ObjectHandle;$/;"	t	typeref:struct:__TEE_ObjectHandle
TEE_ObjectInfo	tee_storage_api.h	/^} TEE_ObjectInfo;$/;"	t	typeref:struct:__anon18
TEE_OpenPersistentObject	tee_storage_api.c	/^TEE_Result TEE_OpenPersistentObject(uint32_t storageID, void *objectID, size_t objectIDLen,$/;"	f
TEE_OperationHandle	tee_crypto_api.h	/^typedef struct __TEE_OperationHandle *TEE_OperationHandle;$/;"	t	typeref:struct:__TEE_OperationHandle
TEE_OperationInfo	tee_crypto_api.h	/^} TEE_OperationInfo;$/;"	t	typeref:struct:__anon2
TEE_OperationInfoKey	tee_crypto_api.h	/^} TEE_OperationInfoKey;$/;"	t	typeref:struct:__anon3
TEE_OperationInfoMultiple	tee_crypto_api.h	/^} TEE_OperationInfoMultiple;$/;"	t	typeref:struct:__anon4
TEE_OperationMode	tee_crypto_api.h	/^} TEE_OperationMode;$/;"	t	typeref:enum:__anon1
TEE_PARAM_TYPES	tee_data_types.h	80;"	d
TEE_PARAM_TYPE_GET	tee_data_types.h	83;"	d
TEE_PARAM_TYPE_MEMREF_INOUT	tee_data_types.h	55;"	d
TEE_PARAM_TYPE_MEMREF_INPUT	tee_data_types.h	53;"	d
TEE_PARAM_TYPE_MEMREF_OUTPUT	tee_data_types.h	54;"	d
TEE_PARAM_TYPE_NONE	tee_data_types.h	49;"	d
TEE_PARAM_TYPE_VALUE_INOUT	tee_data_types.h	52;"	d
TEE_PARAM_TYPE_VALUE_INPUT	tee_data_types.h	50;"	d
TEE_PARAM_TYPE_VALUE_OUTPUT	tee_data_types.h	51;"	d
TEE_PROPSET_CURRENT_CLIENT	tee_data_types.h	68;"	d
TEE_PROPSET_CURRENT_TA	tee_data_types.h	67;"	d
TEE_PROPSET_TEE_IMPLEMENTATION	tee_data_types.h	69;"	d
TEE_Panic	tee_panic.c	/^void TEE_Panic(TEE_Result panicCode)$/;"	f
TEE_Param	tee_data_types.h	/^} TEE_Param;$/;"	t	typeref:union:__anon7
TEE_PopulateTransientObject	tee_storage_api.c	/^TEE_Result TEE_PopulateTransientObject(TEE_ObjectHandle object, TEE_Attribute *attrs,$/;"	f
TEE_PropSetHandle	tee_data_types.h	/^typedef struct __TEE_PropSetHandle* TEE_PropSetHandle;$/;"	t	typeref:struct:__TEE_PropSetHandle
TEE_ReadObjectData	tee_storage_api.c	/^TEE_Result TEE_ReadObjectData(TEE_ObjectHandle object, void *buffer, size_t size, uint32_t *count)$/;"	f
TEE_Realloc	tee_memory.c	/^void *TEE_Realloc(void *buffer, uint32_t newSize) \/\/ TODO HMM the newSize should be size_t$/;"	f
TEE_RenamePersistentObject	tee_storage_api.c	/^TEE_Result TEE_RenamePersistentObject(TEE_ObjectHandle object,$/;"	f
TEE_ResetOperation	tee_crypto_api.c	/^void TEE_ResetOperation(TEE_OperationHandle operation)$/;"	f
TEE_ResetPersistentObjectEnumerator	tee_storage_api.c	/^void TEE_ResetPersistentObjectEnumerator(TEE_ObjectEnumHandle objectEnumerator)$/;"	f
TEE_ResetTransientObject	tee_storage_api.c	/^void TEE_ResetTransientObject(TEE_ObjectHandle object)$/;"	f
TEE_RestrictObjectUsage	tee_storage_api.c	/^void TEE_RestrictObjectUsage(TEE_ObjectHandle object, uint32_t objectUsage)$/;"	f
TEE_STORAGE_PRIVATE	tee_storage_api.h	66;"	d
TEE_SeekObjectData	tee_storage_api.c	/^TEE_Result TEE_SeekObjectData(TEE_ObjectHandle object, int32_t offset, TEE_Whence whence)$/;"	f
TEE_SetInstanceData	tee_memory.c	/^void TEE_SetInstanceData(void *instanceData)$/;"	f
TEE_SetOperationKey	tee_crypto_api.c	/^TEE_Result TEE_SetOperationKey(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f
TEE_SetOperationKey2	tee_crypto_api.c	/^TEE_Result TEE_SetOperationKey2(TEE_OperationHandle operation, TEE_ObjectHandle key1,$/;"	f
TEE_StartPersistentObjectEnumerator	tee_storage_api.c	/^TEE_Result TEE_StartPersistentObjectEnumerator(TEE_ObjectEnumHandle objectEnumerator,$/;"	f
TEE_TASessionHandle	tee_data_types.h	/^typedef struct __TEE_TASessionHandle* TEE_TASessionHandle;$/;"	t	typeref:struct:__TEE_TASessionHandle
TEE_TYPE_AES	tee_data_types.h	/^	TEE_TYPE_AES = 0xA0000010,$/;"	e	enum:__anon10
TEE_TYPE_DES	tee_data_types.h	/^	TEE_TYPE_DES = 0xA0000011,$/;"	e	enum:__anon10
TEE_TYPE_DES3	tee_data_types.h	/^	TEE_TYPE_DES3 =	0xA0000013,$/;"	e	enum:__anon10
TEE_TYPE_DH_KEYPAIR	tee_data_types.h	/^	TEE_TYPE_DH_KEYPAIR = 0xA1000032,$/;"	e	enum:__anon10
TEE_TYPE_DSA_KEYPAIR	tee_data_types.h	/^	TEE_TYPE_DSA_KEYPAIR = 0xA1000031,$/;"	e	enum:__anon10
TEE_TYPE_DSA_PUBLIC_KEY	tee_data_types.h	/^	TEE_TYPE_DSA_PUBLIC_KEY = 0xA0000031,$/;"	e	enum:__anon10
TEE_TYPE_ECDSA_KEYPAIR	tee_data_types.h	/^	TEE_TYPE_ECDSA_KEYPAIR = 0xA1000041,$/;"	e	enum:__anon10
TEE_TYPE_ECDSA_PUBLIC_KEY	tee_data_types.h	/^	TEE_TYPE_ECDSA_PUBLIC_KEY = 0xA0000041,$/;"	e	enum:__anon10
TEE_TYPE_GENERIC_SECRET	tee_data_types.h	/^	TEE_TYPE_GENERIC_SECRET = 0xA0000000,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_MD5	tee_data_types.h	/^	TEE_TYPE_HMAC_MD5 = 0xA0000001,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_SHA1	tee_data_types.h	/^	TEE_TYPE_HMAC_SHA1 = 0xA0000002,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_SHA224	tee_data_types.h	/^	TEE_TYPE_HMAC_SHA224 = 0xA0000003,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_SHA256	tee_data_types.h	/^	TEE_TYPE_HMAC_SHA256 = 0xA0000004,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_SHA384	tee_data_types.h	/^	TEE_TYPE_HMAC_SHA384 = 0xA0000005,$/;"	e	enum:__anon10
TEE_TYPE_HMAC_SHA512	tee_data_types.h	/^	TEE_TYPE_HMAC_SHA512 = 0xA0000006,$/;"	e	enum:__anon10
TEE_TYPE_RSA_KEYPAIR	tee_data_types.h	/^	TEE_TYPE_RSA_KEYPAIR = 0xA1000030,$/;"	e	enum:__anon10
TEE_TYPE_RSA_PUBLIC_KEY	tee_data_types.h	/^	TEE_TYPE_RSA_PUBLIC_KEY = 0xA0000030,$/;"	e	enum:__anon10
TEE_TruncateObjectData	tee_storage_api.c	/^TEE_Result TEE_TruncateObjectData(TEE_ObjectHandle object, uint32_t size)$/;"	f
TEE_USAGE_DECRYPT	tee_storage_api.h	82;"	d
TEE_USAGE_DERIVE	tee_storage_api.h	86;"	d
TEE_USAGE_ENCRYPT	tee_storage_api.h	81;"	d
TEE_USAGE_EXTRACTABLE	tee_storage_api.h	80;"	d
TEE_USAGE_MAC	tee_storage_api.h	83;"	d
TEE_USAGE_SIGN	tee_storage_api.h	84;"	d
TEE_USAGE_VERIFY	tee_storage_api.h	85;"	d
TEE_Whence	tee_storage_api.h	/^} TEE_Whence;$/;"	t	typeref:enum:__anon19
TEE_WriteObjectData	tee_storage_api.c	/^TEE_Result TEE_WriteObjectData(TEE_ObjectHandle object, void *buffer, size_t size)$/;"	f
__TEE_CRYPTO_API_H__	tee_crypto_api.h	18;"	d
__TEE_INTERNAL_DATA_TYPES_H__	tee_data_types.h	18;"	d
__TEE_INTERNAL_MEMORY_H__	tee_memory.h	18;"	d
__TEE_LOGGING_H__	tee_logging.h	18;"	d
__TEE_OBJECT_HANDLE_H__	tee_object_handle.h	18;"	d
__TEE_ObjectHandle	tee_object_handle.h	/^struct __TEE_ObjectHandle {$/;"	s
__TEE_OperationHandle	tee_crypto_api.c	/^struct __TEE_OperationHandle {$/;"	s	file:
__TEE_PANIC_H__	tee_panic.h	18;"	d
__TEE_STORAGE_API_H__	tee_storage_api.h	18;"	d
a	tee_data_types.h	/^		uint32_t a;$/;"	m	struct:__anon7::__anon9
a	tee_storage_api.h	/^			uint32_t a, b;$/;"	m	struct:__anon14::__anon15::__anon17
add_rsa_cipher_padding	tee_crypto_api.c	/^static bool add_rsa_cipher_padding(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f	file:
add_rsa_signature_padding	tee_crypto_api.c	/^static bool add_rsa_signature_padding(TEE_OperationHandle operation, void *EM, void *mHash,$/;"	f	file:
alg_requires_2_keys	tee_crypto_api.c	/^static bool alg_requires_2_keys(uint32_t alg)$/;"	f	file:
algorithm	tee_crypto_api.h	/^	uint32_t algorithm;$/;"	m	struct:__anon2
algorithm	tee_crypto_api.h	/^	uint32_t algorithm;$/;"	m	struct:__anon4
algorithm_Identifier	tee_crypto_api.h	/^} algorithm_Identifier;$/;"	t	typeref:enum:__anon5
attr_id_flag	tee_data_types.h	/^} attr_id_flag;$/;"	t	typeref:enum:__anon12
attributeID	tee_storage_api.h	/^	uint32_t attributeID;$/;"	m	struct:__anon14
attrs	tee_object_handle.h	/^	TEE_Attribute *attrs;$/;"	m	struct:__TEE_ObjectHandle
attrs_count	tee_object_handle.h	/^	uint32_t attrs_count;$/;"	m	struct:__TEE_ObjectHandle
b	tee_data_types.h	/^		uint32_t b;$/;"	m	struct:__anon7::__anon9
b	tee_storage_api.h	/^			uint32_t a, b;$/;"	m	struct:__anon14::__anon15::__anon17
bn_to_obj_ref_attr	tee_storage_api.c	/^static bool bn_to_obj_ref_attr(BIGNUM *bn, uint32_t atrr_ID, TEE_ObjectHandle obj, int obj_index)$/;"	f	file:
buffer	tee_data_types.h	/^		void* buffer;$/;"	m	struct:__anon7::__anon8
buffer	tee_storage_api.h	/^			void *buffer;$/;"	m	struct:__anon14::__anon15::__anon16
check_IV_and_malloc_cpy2op	tee_crypto_api.c	/^static void check_IV_and_malloc_cpy2op(TEE_OperationHandle operation, void *IV, uint32_t IV_len)$/;"	f	file:
check_rsa_bufs_len	tee_crypto_api.c	/^static TEE_Result check_rsa_bufs_len(TEE_OperationHandle operation, const EVP_MD *hash,$/;"	f	file:
clear_key_from_operation	tee_crypto_api.c	/^static void clear_key_from_operation(TEE_OperationHandle operation)$/;"	f	file:
content	tee_storage_api.h	/^	} content;$/;"	m	struct:__anon14	typeref:union:__anon14::__anon15
copy_attr_from_attrArr_to_object	tee_storage_api.c	/^static bool copy_attr_from_attrArr_to_object(TEE_Attribute *params, uint32_t paramCount,$/;"	f	file:
copy_attr_from_obj_to_obj	tee_storage_api.c	/^static bool copy_attr_from_obj_to_obj(TEE_ObjectHandle srcObj, uint32_t cpy_attrID,$/;"	f	file:
cpy_key_comp_to_bn	tee_crypto_api.c	/^static bool cpy_key_comp_to_bn(BIGNUM **bn, uint32_t attrID, TEE_ObjectHandle key)$/;"	f	file:
ctx	tee_crypto_api.c	/^	void *ctx;$/;"	m	struct:operation_key	file:
dataPosition	tee_storage_api.h	/^	uint32_t dataPosition;$/;"	m	struct:__anon18
dataSize	tee_storage_api.h	/^	uint32_t dataSize;$/;"	m	struct:__anon18
data_begin	tee_object_handle.h	/^	size_t data_begin;$/;"	m	struct:persistant_object_info
data_position	tee_object_handle.h	/^	size_t data_position;$/;"	m	struct:persistant_object_info
data_size	tee_object_handle.h	/^	size_t data_size;$/;"	m	struct:persistant_object_info
dig_ctx	tee_crypto_api.c	/^	void *dig_ctx;$/;"	m	struct:__TEE_OperationHandle	file:
digestLength	tee_crypto_api.h	/^	uint32_t digestLength;$/;"	m	struct:__anon2
digestLength	tee_crypto_api.h	/^	uint32_t digestLength;$/;"	m	struct:__anon4
dsa_sign	tee_crypto_api.c	/^TEE_Result dsa_sign(TEE_OperationHandle operation, void *digest, uint32_t digestLen,$/;"	f
dsa_ver	tee_crypto_api.c	/^TEE_Result dsa_ver(TEE_OperationHandle operation, void *digest, uint32_t digestLen, void *signature,$/;"	f
dup_dh_key	tee_crypto_api.c	/^static void dup_dh_key(TEE_OperationHandle dstOperation, TEE_OperationHandle srcOperation)$/;"	f	file:
dup_dsa_key	tee_crypto_api.c	/^static void dup_dsa_key(TEE_OperationHandle dstOperation, TEE_OperationHandle srcOperation)$/;"	f	file:
dup_rsa_key	tee_crypto_api.c	/^static void dup_rsa_key(TEE_OperationHandle dstOperation, TEE_OperationHandle srcOperation)$/;"	f	file:
ecdsa_sign	tee_crypto_api.c	/^TEE_Result ecdsa_sign(TEE_OperationHandle operation, void *digest, uint32_t digestLen,$/;"	f
ecdsa_ver	tee_crypto_api.c	/^TEE_Result ecdsa_ver(TEE_OperationHandle operation, void *digest, uint32_t digestLen,$/;"	f
free_key_and_ctx	tee_crypto_api.c	/^static void free_key_and_ctx(TEE_OperationHandle operation)$/;"	f	file:
gen_des_key	tee_storage_api.c	/^static TEE_Result gen_des_key(TEE_ObjectHandle object, uint32_t keySize)$/;"	f	file:
gen_dh_keypair	tee_storage_api.c	/^static TEE_Result gen_dh_keypair(TEE_ObjectHandle object, TEE_Attribute *params,$/;"	f	file:
gen_dsa_keypair	tee_storage_api.c	/^static TEE_Result gen_dsa_keypair(TEE_ObjectHandle object, TEE_Attribute *params,$/;"	f	file:
gen_ecc_keypair	tee_storage_api.c	/^static TEE_Result gen_ecc_keypair(TEE_ObjectHandle object, TEE_Attribute *params,$/;"	f	file:
gen_rsa_keypair	tee_storage_api.c	/^static TEE_Result gen_rsa_keypair(TEE_ObjectHandle obj, uint32_t key_size, TEE_Attribute *params,$/;"	f	file:
gen_symmetric_key	tee_storage_api.c	/^static TEE_Result gen_symmetric_key(TEE_ObjectHandle object, uint32_t keySize)$/;"	f	file:
get_actual_key_size	tee_crypto_api.c	/^static uint32_t get_actual_key_size(uint32_t objectType, uint32_t maxObjectSize)$/;"	f	file:
get_attr_by_ID	tee_crypto_api.c	/^static TEE_Attribute *get_attr_by_ID(TEE_ObjectHandle object, uint32_t attributeID)$/;"	f	file:
get_attr_index	tee_storage_api.c	/^static int get_attr_index(TEE_ObjectHandle object, uint32_t attributeID)$/;"	f	file:
get_attr_index_and_check_rights	tee_storage_api.c	/^static int get_attr_index_and_check_rights(TEE_ObjectHandle object, uint32_t attributeID)$/;"	f	file:
get_attr_index_from_attrArr	tee_storage_api.c	/^static int get_attr_index_from_attrArr(uint32_t ID, TEE_Attribute *attrs, uint32_t attrCount)$/;"	f	file:
get_dh_pub_val	tee_crypto_api.c	/^static TEE_Attribute *get_dh_pub_val(TEE_Attribute *params, uint32_t paramCount)$/;"	f	file:
get_openssl_NID_value	tee_crypto_api.c	/^static uint32_t get_openssl_NID_value(uint32_t algorithm)$/;"	f	file:
get_operation_class	tee_crypto_api.c	/^static uint32_t get_operation_class(uint32_t alg)$/;"	f	file:
get_rsa_oaep_label	tee_crypto_api.c	/^static void get_rsa_oaep_label(TEE_Attribute *params, uint32_t paramCount,$/;"	f	file:
get_rsa_salt	tee_crypto_api.c	/^static int get_rsa_salt(TEE_Attribute *params, uint32_t paramCount)$/;"	f	file:
gp_curve2nid	tee_storage_api.c	/^static int gp_curve2nid(obj_ecc_curve curve)$/;"	f	file:
handleFlags	tee_storage_api.h	/^	uint32_t handleFlags;$/;"	m	struct:__anon18
handleState	tee_crypto_api.h	/^	uint32_t handleState;$/;"	m	struct:__anon2
handleState	tee_crypto_api.h	/^	uint32_t handleState;$/;"	m	struct:__anon4
init_digest_op	tee_crypto_api.c	/^static TEE_Result init_digest_op(TEE_OperationHandle operation, uint32_t algorithm)$/;"	f	file:
init_operation_meta_info	tee_crypto_api.c	/^static TEE_Result init_operation_meta_info(TEE_OperationHandle operation, uint32_t algorithm)$/;"	f	file:
instance_data	tee_memory.c	/^static void *instance_data;$/;"	v	file:
int2uint32	tee_crypto_api.c	/^static uint32_t int2uint32(int cast_int)$/;"	f	file:
key	tee_crypto_api.c	/^	struct operation_key key;$/;"	m	struct:__TEE_OperationHandle	typeref:struct:__TEE_OperationHandle::operation_key	file:
key	tee_crypto_api.c	/^	void *key;$/;"	m	struct:operation_key	file:
keyInformation	tee_crypto_api.h	/^	TEE_OperationInfoKey keyInformation[1]; \/* why one? *\/$/;"	m	struct:__anon4
keySize	tee_crypto_api.h	/^	uint32_t keySize;$/;"	m	struct:__anon2
keySize	tee_crypto_api.h	/^	uint32_t keySize;$/;"	m	struct:__anon3
key_len	tee_crypto_api.c	/^	uint32_t key_len;$/;"	m	struct:operation_key	file:
key_raw_size	tee_storage_api.c	/^static uint32_t key_raw_size(uint32_t objectType, uint32_t key)$/;"	f	file:
key_size2	tee_crypto_api.c	/^	uint32_t key_size2; \/* If operation has two key, this is second key len *\/$/;"	m	struct:__TEE_OperationHandle	file:
key_usage_allow_operation	tee_crypto_api.c	/^static bool key_usage_allow_operation(uint32_t obj_usage, uint32_t op_mode, uint32_t alg)$/;"	f	file:
length	tee_storage_api.h	/^			uint32_t length;$/;"	m	struct:__anon14::__anon15::__anon16
load_evp_asym_hash	tee_crypto_api.c	/^static const EVP_MD *load_evp_asym_hash(TEE_OperationHandle operation)$/;"	f	file:
load_evp_mac_cipher	tee_crypto_api.c	/^static const EVP_CIPHER *load_evp_mac_cipher(TEE_OperationHandle operation)$/;"	f	file:
load_evp_mac_hash	tee_crypto_api.c	/^static const EVP_MD *load_evp_mac_hash(TEE_OperationHandle operation)$/;"	f	file:
load_evp_sym_cipher	tee_crypto_api.c	/^static const EVP_CIPHER *load_evp_sym_cipher(TEE_OperationHandle operation)$/;"	f	file:
login	tee_data_types.h	/^	uint32_t login;$/;"	m	struct:__anon6
malloc_and_cpy_dh_key	tee_crypto_api.c	/^static TEE_Result malloc_and_cpy_dh_key(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f	file:
malloc_and_cpy_dsa_key	tee_crypto_api.c	/^static TEE_Result malloc_and_cpy_dsa_key(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f	file:
malloc_and_cpy_ecdsa_key	tee_crypto_api.c	/^static TEE_Result malloc_and_cpy_ecdsa_key(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f	file:
malloc_and_cpy_rsa_key	tee_crypto_api.c	/^static TEE_Result malloc_and_cpy_rsa_key(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f	file:
malloc_and_cpy_symmetric_key	tee_crypto_api.c	/^static TEE_Result malloc_and_cpy_symmetric_key(TEE_OperationHandle operation, TEE_ObjectHandle key)$/;"	f	file:
maxKeySize	tee_crypto_api.h	/^	uint32_t maxKeySize;$/;"	m	struct:__anon2
maxKeySize	tee_crypto_api.h	/^	uint32_t maxKeySize;$/;"	m	struct:__anon4
maxObjSizeBytes	tee_object_handle.h	/^	uint32_t maxObjSizeBytes;$/;"	m	struct:__TEE_ObjectHandle
maxObjectSize	tee_storage_api.h	/^	uint32_t maxObjectSize;$/;"	m	struct:__anon18
max_mac_len	tee_crypto_api.c	/^static int max_mac_len(TEE_OperationHandle operation)$/;"	f	file:
memref	tee_data_types.h	/^	} memref;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon8
mode	tee_crypto_api.h	/^	uint32_t mode;$/;"	m	struct:__anon2
mode	tee_crypto_api.h	/^	uint32_t mode;$/;"	m	struct:__anon4
multiple_of_64	tee_storage_api.c	/^static bool multiple_of_64(uint32_t number)$/;"	f	file:
multiple_of_8	tee_storage_api.c	/^static bool multiple_of_8(uint32_t number)$/;"	f	file:
numberOfKeys	tee_crypto_api.h	/^	uint32_t numberOfKeys;$/;"	m	struct:__anon4
obj_ecc_curve	tee_data_types.h	/^} obj_ecc_curve;$/;"	t	typeref:enum:__anon13
obj_func_atribute	tee_data_types.h	/^} obj_func_atribute;$/;"	t	typeref:enum:__anon11
obj_id	tee_object_handle.h	/^	char obj_id[TEE_OBJECT_ID_MAX_LEN + 1];$/;"	m	struct:persistant_object_info
obj_id_len	tee_object_handle.h	/^	size_t obj_id_len;$/;"	m	struct:persistant_object_info
objectInfo	tee_object_handle.h	/^	TEE_ObjectInfo objectInfo;$/;"	m	struct:__TEE_ObjectHandle
objectSize	tee_storage_api.h	/^	uint32_t objectSize;$/;"	m	struct:__anon18
objectType	tee_storage_api.h	/^	uint32_t objectType;$/;"	m	struct:__anon18
objectUsage	tee_storage_api.h	/^	uint32_t objectUsage;$/;"	m	struct:__anon18
object_type	tee_data_types.h	/^} object_type;$/;"	t	typeref:enum:__anon10
object_type_compatible_to_op	tee_crypto_api.c	/^static bool object_type_compatible_to_op(uint32_t obj_type, uint32_t op_mode)$/;"	f	file:
op_state	tee_crypto_api.c	/^	uint32_t op_state;$/;"	m	struct:__TEE_OperationHandle	file:
openssl_cleanup	tee_crypto_api.c	/^static void __attribute__((destructor)) openssl_cleanup()$/;"	f	file:
openssl_cleanup	tee_storage_api.c	/^static void openssl_cleanup()$/;"	f	file:
openssl_init	tee_crypto_api.c	/^static bool __attribute__((constructor)) openssl_init()$/;"	f	file:
operationClass	tee_crypto_api.h	/^	uint32_t operationClass;$/;"	m	struct:__anon2
operationClass	tee_crypto_api.h	/^	uint32_t operationClass;$/;"	m	struct:__anon4
operationState	tee_crypto_api.h	/^	uint32_t operationState;$/;"	m	struct:__anon4
operation_info	tee_crypto_api.c	/^	TEE_OperationInfo operation_info;$/;"	m	struct:__TEE_OperationHandle	file:
operation_key	tee_crypto_api.c	/^struct operation_key {$/;"	s	file:
per_object	tee_object_handle.h	/^	struct persistant_object_info per_object;$/;"	m	struct:__TEE_ObjectHandle	typeref:struct:__TEE_ObjectHandle::persistant_object_info
persistant_object_info	tee_object_handle.h	/^struct persistant_object_info {$/;"	s
rand_buf	tee_crypto_api.c	/^static void rand_buf(void *buf, uint32_t len)$/;"	f	file:
ref	tee_storage_api.h	/^		} ref;$/;"	m	union:__anon14::__anon15	typeref:struct:__anon14::__anon15::__anon16
remove_rsa_cipher_padding	tee_crypto_api.c	/^static bool remove_rsa_cipher_padding(TEE_OperationHandle operation, void *srcData, uint32_t srcLen,$/;"	f	file:
requiredKeyUsage	tee_crypto_api.h	/^	uint32_t requiredKeyUsage;$/;"	m	struct:__anon2
requiredKeyUsage	tee_crypto_api.h	/^	uint32_t requiredKeyUsage;$/;"	m	struct:__anon3
reset_attrs	tee_storage_api.c	/^static void reset_attrs(TEE_ObjectHandle obj)$/;"	f	file:
rsa_msg_max_len	tee_crypto_api.c	/^static uint32_t rsa_msg_max_len(TEE_OperationHandle operation, const EVP_MD *hash)$/;"	f	file:
rsa_op_generic_pre_checks_and_setup	tee_crypto_api.c	/^static TEE_Result rsa_op_generic_pre_checks_and_setup(TEE_OperationHandle operation,$/;"	f	file:
rsa_sign	tee_crypto_api.c	/^static TEE_Result rsa_sign(TEE_OperationHandle operation, TEE_Attribute *params,$/;"	f	file:
rsa_sign_ver_generic_checks_and_setup	tee_crypto_api.c	/^static TEE_Result rsa_sign_ver_generic_checks_and_setup(TEE_OperationHandle operation, void *digest,$/;"	f	file:
rsa_ver	tee_crypto_api.c	/^static TEE_Result rsa_ver(TEE_OperationHandle operation, TEE_Attribute *params, uint32_t paramCount,$/;"	f	file:
set_symmetric_padding	tee_crypto_api.c	/^static void set_symmetric_padding(uint32_t algorithm, EVP_CIPHER_CTX *ctx)$/;"	f	file:
size	tee_data_types.h	/^		size_t size;$/;"	m	struct:__anon7::__anon8
storage_blob_id	tee_object_handle.h	/^	uint32_t  storage_blob_id;$/;"	m	struct:persistant_object_info
supported_algorithms	tee_crypto_api.c	/^static bool supported_algorithms(uint32_t alg, uint32_t key_size)$/;"	f	file:
uint322int	tee_crypto_api.c	/^static int uint322int(uint32_t cast_uint32)$/;"	f	file:
uuid	tee_data_types.h	/^	TEE_UUID uuid;$/;"	m	struct:__anon6
valid_key_and_operation	tee_crypto_api.c	/^static TEE_Result valid_key_and_operation(TEE_ObjectHandle key, TEE_OperationHandle operation)$/;"	f	file:
valid_key_size_for_algorithm	tee_crypto_api.c	/^static bool valid_key_size_for_algorithm(uint32_t alg, uint32_t key)$/;"	f	file:
valid_key_type_for_operation_algorithm	tee_crypto_api.c	/^static bool valid_key_type_for_operation_algorithm(uint32_t key_type, uint32_t op_algorithm)$/;"	f	file:
valid_mode_and_algorithm	tee_crypto_api.c	/^static bool valid_mode_and_algorithm(uint32_t alg, TEE_OperationMode mode)$/;"	f	file:
valid_object_max_size	tee_storage_api.c	/^static bool valid_object_max_size(object_type obj, uint32_t size)$/;"	f	file:
value	tee_data_types.h	/^	} value;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon9
value	tee_storage_api.h	/^		} value;$/;"	m	union:__anon14::__anon15	typeref:struct:__anon14::__anon15::__anon17
write_object_data	tee_storage_api.c	/^static TEE_Result write_object_data(TEE_ObjectHandle object,$/;"	f	file:
